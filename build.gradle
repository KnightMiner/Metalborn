plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

group = "knightminer"
base {
  archivesName = "Metalborn"
}
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//adds the build number to the end of the version string if on a build server
def mod_build = mod_version
if (System.getenv().BUILD_NUMBER != null) {
	mod_build += ".${System.getenv().BUILD_NUMBER}"
}
version = "${minecraft_version}-${mod_build}"
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}, Version: ${version}"

sourceSets {
  main { resources {
    srcDirs "src/generated/resources"
    // But exclude the cache of the generated data from what gets built
    exclude '.cache'
  } }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

minecraft {
  mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

  // enableIdeaPrepareRuns = true
  copyIdeResources = true
    
  accessTransformer project.file("src/main/resources/META-INF/accesstransformer.cfg")
  
  runs {
    // applies to all the run configs below
    configureEach {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      // The markers can be added/remove as needed separated by commas.
      // "SCAN": For mods scan.
      // "REGISTRIES": For firing of registry events.
      // "REGISTRYDUMP": For getting the contents of all registries.
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP,CORE'

      // Recommended logging level for the console
      // You can set various levels here.
      // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
      property 'forge.logging.console.level', 'debug'
      
      mods {
        metalborn {
          source sourceSets.main
        }
      }
    }
        
    client {
    }

    server {
      workingDirectory project.file('run/server')
            
      args '--nogui'
    }

    data {
      args '--mod', 'metalborn', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'mantle'
    }
  }
}

repositories {
  // Mantle
  maven {
    name 'DVS1 Maven FS'
    url 'https://dvs1.progwml6.com/files/maven'
  }
  // JEI
  maven {
      name 'BlameJared Maven'
      url 'https://maven.blamejared.com'
  }
  // pull in Mantle builds for testing in dev changes
  flatDir {
    dir '../Mantle/build/libs'
  }
}

configurations {
    deployerJars
}

dependencies {
  minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
  
  implementation fg.deobf("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}")
    
  // compile against the JEI API but do not include it at runtime
  compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
  compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
  // at runtime, use the full JEI jar
  runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
      'version': mod_version,
      'loader_range': loader_range,
      'minecraft_range': minecraft_range,
      'forge_range': forge_range,
      'mantle_range': mantle_range
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
  manifest {
    attributes([
      "Specification-Title": "Metalborn",
      "Specification-Vendor": "KnightMiner",
      "Specification-Version": "1", // We are version 1 of ourselves
      "Implementation-Title": project.name,
      "Implementation-Version": "${version}",
      "Implementation-Vendor": "KnightMiner",
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

jar.finalizedBy('reobfJar')

java {
    withSourcesJar()
}

sourcesJar {
    exclude 'assets/**'
    exclude 'data/**'
    exclude 'pack.png'
    exclude 'pack.mcmeta'
    exclude 'META-INF/mods.toml'
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }

    repositories {
        if (project.hasProperty('DEPLOY_DIR')) {
            maven { url DEPLOY_DIR }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
